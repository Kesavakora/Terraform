pipeline {
   agent any
   /*tools{
        tool name: 'terraform', type: 'terraform'
   }*/
    parameters {
      /*  string(name: 'environment', defaultValue: 'default', description: 'Workspace/environment file to use for deployment')
        string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
        booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?') */
        choice(name: 'ENTORNOS', choices: ['dev', 'pre', 'pro'], description: 'Seleccione el entorno a utilizar')
        choice(name: 'ACCION', choices: ['', 'plan-apply', 'destroy'], description: 'Seleccione el entorno a utilizar')
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        //TF_IN_AUTOMATION      = '1'
    }
    stages {
        stage('git checkout') {
            steps {
                git branch: 'main', credentialsId: 'GitHubCredentials', url: 'https://github.com/Kesavakora/Terraform.git'
            }
        }
        stage('terraform init') {
            steps {
                sh '/opt/homebrew/bin/Terraform init'
            }
        }
        stage('terraform plan') {
            steps {
                sh '/opt/homebrew/bin/terraform plan -out myplan'
            }
        }

        stage('Confirmaci√≥n de accion') {
            steps {
                script {
                    def userInput = input(id: 'confirm', message: params.ACCION + '?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
                }
            }
        }
        
        stage('Terraform apply or destroy ----------------') {
            steps {
               sh 'echo "comienza"'
                script{  
                    if (params.ACCION == "destroy"){
                        sh 'echo "llego" + params.ACCION'   
                        sh '/opt/homebrew/bin/terraform destroy -auto-approve'
                    } 
                    else {
                        sh ' echo  "apply" + params.ACCION'                 
                        sh '/opt/homebrew/bin/terraform apply -refresh=true -auto-approve'  
                    }  // if

                }
            } 
        }  
        /*stage('terraform apply') {
            steps {
                sh '/opt/homebrew/bin/Terraform apply --auto-approve'
            }
        }*/
    }
}